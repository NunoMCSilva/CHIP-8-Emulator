"""
opcode_2nnn: lambda _, nnn: f"call {nnn}",
opcode_3nnn: lambda _, x, nn: f"SE V{x}, {nn}",  # f"skip next if V{hex(x)[-1]} == {hex(nn)}",
opcode_4nnn: lambda _, x, nn: f"SNE V{x}, {nn}",  # f"skip next if V{hex(x)[-1]} != {hex(nn)}",
opcode_5xy0: lambda _, x, y: f"SE V{x}, V{y}",  # f"skip next if V{hex(x)[-1]} == V{hex(y)[-1]}",
opcode_6xnn: lambda _, x, nn: f"LD V{x}, {nn}",  # f"V{hex(x)[-1]} = {hex(nn)}",
opcode_7xnn: lambda _, x, nn: f"ADD V{x}, {nn}",  # f"V{hex(x)[-1]} += {hex(nn)}",
opcode_8xy0: lambda _, x, y: f"LD V{x}, V{y}",  # f"V{hex(x)[-1]} = V{hex(y)[-1]}",
opcode_8xy1: lambda _, x, y: f"OR V{x}, V{y}",  # f"V{hex(x)[-1]} = V{hex(y)[-1]} or V{hex(y)[-1]}",
opcode_8xy2: lambda _, x, y: f"AND V{x}, V{y}",  ##f"V{hex(x)[-1]} = V{hex(y)[-1]} and V{hex(y)[-1]}",
opcode_8xy3: lambda _, x, y: f"XOR V{x}, V{y}",  # f"V{hex(x)[-1]} = V{hex(y)[-1]} xor V{hex(y)[-1]}",
opcode_8xy4: lambda _, x, y: f"ADD V{x}, V{y}",  # f"V{hex(x)[-1]} += V{hex(y)[-1]}; VF = carry",
opcode_8xy5: lambda _, x, y: f"SUB V{x}, V{y}",  # f"V{hex(x)[-1]} -= V{hex(y)[-1]}; VF = borrow",
opcode_8xy6: lambda _, x, y: f"SHR V{x}, V{y}",  # f"V{hex(x)[-1]} = V{hex(y)[-1]} >> 1; VF = lsb",
opcode_8xy7: lambda _, x, y: f"SUBN V{x}, V{y}",  # f"V{hex(x)[-1]} = V{hex(y)[-1]} - V{hex(x)[-1]}; VF = borrow",
opcode_8xye: lambda _, x, y: f"SHL V{x}, V{y}",  # f"V{hex(x)[-1]} = V{hex(y)[-1]} << 1; VF = msb",
opcode_9xy0: lambda _, x, y: f"SNE V{x}, V{y}",  # f"skip next if V{hex(x)[-1]} != V{hex(y)[-1]}",
opcode_annn: lambda _, nnn: f"LD I, {nnn}",  # f"I = {hex(nnn)}",
opcode_bnnn: lambda _, nnn: f"JP V0, {nnn}",  # f"jump {hex(nnn)} + V0",    # (jump {hex(nnn#self.v[0])})",
opcode_cxnn: lambda _, x, nn: f"RND V{x}, {nn}",  # f"V{hex(x)[-1]} = rnd() with mask {hex(nn)}",
opcode_dxyn: lambda _, x, y,
                    n: f"DRW V{x}, V{y}, {n}",  # f"draw {hex(n)} bytes of sprite data to V{hex(x)[-1]}, V{hex(y)[-1]}",
opcode_ex9e: lambda _, x: f"SKP V{x}",  # f"skip next if keypress() == V{hex(x)[-1]}",
opcode_exa1: lambda _, x: f"SKNP V{x}",  ##f"skip next if keypress() != V{hex(x)[-1]}",
opcode_fx07: lambda _,
                    x: f"LD V{x}, DT",  # f"V{hex(x)[-1]} = delay_timer",  # (V{hex(x)[-1]} = {hex(self.delay_timer)}",
opcode_fx0a: lambda _, x: f"LD V{x}, K",  # f"V{hex(x)[-1]} = input()",
opcode_fx15: lambda _, x: f"LD DT, V{x}",  # f"delay_timer = V{hex(x)[-1]}",
opcode_fx18: lambda _, x: f"LD ST, V{x}",  # f"sound_timer = V{hex(x)[-1]}",
opcode_fx1e: lambda _, x: f"ADD I, V{x}",  # f"I += V{hex(x)[-1]}",
opcode_fx29: lambda _, x: f"LD F, V{x}",  # f"I = sprite_data(V{hex(x)[-1]})",
opcode_fx33: lambda _, x: f"LD B, V(x}",  # f"memory[I:] = BCD(V{hex(x)[-1]})",
opcode_fx55: lambda _, x: f"LD [I], V{x}",  # f"memory[I:] = V[0:hex(x)[-1]nclusive]; I = I + hex(x) + 1",
opcode_fx65: lambda _, x: f"LD Vx, [i]",  # f"V[0:hex(x)[-1]nclusive] = memory[I:]; I = I + hex(x) + 1",
"""